name: Daily Commit Report

on:
  schedule:
    # Se ejecuta a las 23:59:59 hora de Per√∫ (UTC-5) que equivale a 04:59:59 UTC
    - cron: '59 4 * * *'
  workflow_dispatch:  # Permite ejecuci√≥n manual desde GitHub Actions

jobs:
  check_commits:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Clonar el repositorio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtiene todo el historial de commits

      - name: üõ† Configurar Git y Zona Horaria
        run: |
          # Configuraci√≥n de zona horaria para Per√∫
          sudo timedatectl set-timezone America/Lima
          export TZ='America/Lima'
          
          # Configuraci√≥n b√°sica de Git
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Obtener todas las referencias remotas
          git fetch --all --prune --tags --force
          git pull --all

      - name: üìä Generar reporte detallado de commits
        id: generate-report
        run: |
          # Fechas ajustadas para Per√∫
          TODAY_PERU=$(date +"%Y-%m-%d")
          START_TIME="${TODAY_PERU} 00:00:00 -0500"
          END_TIME="${TODAY_PERU} 23:59:59 -0500"
          CURRENT_TIME_PERU=$(date +"%Y-%m-%d %H:%M:%S %z")
          
          # Guardar fecha para el asunto del correo
          echo "REPORT_DATE=${TODAY_PERU}" >> $GITHUB_ENV
          
          # Lista de usuarios
          USERS=("DianaCY-ai" "Dihani")
          EMAILS=("diana.carrasco@inetum.com" "dihani.cy@gmail.com")
          
          # Inicio del reporte HTML
          REPORT="""<html>
          <head>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            h2 { color: #2c3e50; border-bottom: 2px solid #eee; padding-bottom: 10px; }
            h3 { color: #3498db; margin-top: 20px; }
            table { border-collapse: collapse; width: 100%; margin: 15px 0; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
            th { background-color: #3498db; color: white; text-align: left; padding: 10px; }
            td { padding: 10px; border-bottom: 1px solid #ddd; }
            .commit-row:hover { background-color: #f5f5f5; }
            .files-list { margin: 0; padding-left: 20px; list-style-type: square; }
            .no-changes { color: #7f8c8d; }
            .commit-hash { font-family: monospace; color: #2980b9; }
            .timestamp { font-size: 0.9em; color: #95a5a6; text-align: right; }
            .branch-main { background-color: #e8f5e9; }
            .branch-feature { background-color: #e3f2fd; }
          </style>
          </head>
          <body>
            <h2>üîç <strong>REPORTE DE COMMITS - $TODAY_PERU</strong></h2>
            <p class="timestamp">Generado el: $CURRENT_TIME_PERU (hora local Per√∫)</p>"""

          # Funci√≥n para obtener la rama principal de un commit
          get_primary_branch() {
            local commit_hash=$1
            # Primero buscamos ramas remotas que contengan el commit
            local branches=$(git branch -r --contains "$commit_hash" | sed 's/^[ \t]*origin\///' | grep -v "HEAD" | sort)
            
            # Priorizamos main si existe
            if echo "$branches" | grep -q "main"; then
              echo "main"
              return
            fi
            
            # Luego buscamos cualquier otra rama
            local primary_branch=$(echo "$branches" | head -n1)
            
            # Si no encontramos, usamos el m√©todo alternativo
            if [ -z "$primary_branch" ]; then
              primary_branch=$(git log -n 1 --pretty=format:"%D" "$commit_hash" | grep -o "origin/[^ ,]*" | sed 's/origin\///' | head -n1)
            fi
            
            # Limpieza final del nombre
            primary_branch=$(echo "$primary_branch" | sed -e 's/~[0-9]//g' -e 's/\^[0-9]//g' -e 's/HEAD -> //')
            
            # Si sigue vac√≠o o tiene formato incorrecto, usar "main"
            if [ -z "$primary_branch" ] || [[ "$primary_branch" =~ ~ ]] || [[ "$primary_branch" =~ \^ ]]; then
              echo "main"
            else
              echo "$primary_branch"
            fi
          }

          # Iterar sobre cada usuario
          for i in "${!USERS[@]}"; do
            USERNAME="${USERS[$i]}"
            EMAIL="${EMAILS[$i]}"

            # Obtener commits del usuario
            COMMITS=$(git log --since="$START_TIME" --until="$END_TIME" --author="$USERNAME" \
                      --pretty=format:"%H|%s|%cd|%d" --date=format:'%Y-%m-%d %H:%M:%S %z' --all)

            if [ -n "$COMMITS" ]; then
              REPORT+="<h3>‚úÖ <strong>$USERNAME</strong> (${EMAIL})</h3>"
              REPORT+="<table>"
              REPORT+="<tr><th>Mensaje</th><th>ID Commit</th><th>Fecha/Hora</th><th>Rama</th><th>Archivos</th></tr>"
              
              # Procesar cada commit
              while IFS="|" read -r HASH MESSAGE DATE REF; do
                # Obtener la rama principal
                BRANCH=$(get_primary_branch "$HASH")
                
                # Determinar clase CSS seg√∫n la rama
                if [ "$BRANCH" = "main" ]; then
                  BRANCH_CLASS="branch-main"
                else
                  BRANCH_CLASS="branch-feature"
                fi
                
                # Obtener archivos modificados
                FILES=$(git diff-tree --no-commit-id --name-only -r "$HASH")
                FILE_LIST="<ul class='files-list'>"
                while read -r FILE; do
                  FILE_LIST+="<li>$FILE</li>"
                done <<< "$FILES"
                FILE_LIST+="</ul>"
                
                # Agregar fila a la tabla
                REPORT+="<tr class='commit-row'>"
                REPORT+="<td>$MESSAGE</td>"
                REPORT+="<td><span class='commit-hash'>${HASH:0:7}</span></td>"
                REPORT+="<td>$DATE</td>"
                REPORT+="<td class='$BRANCH_CLASS'>$BRANCH</td>"
                REPORT+="<td>$FILE_LIST</td>"
                REPORT+="</tr>"
              done <<< "$COMMITS"
              
              REPORT+="</table>"
            else
              REPORT+="<h3 class='no-changes'>‚ùå $USERNAME (${EMAIL}) NO realiz√≥ commits hoy.</h3>"
            fi
          done

          REPORT+="</body></html>"

          # Guardar reporte
          echo "$REPORT" > commit_report.html
          echo "commit_report<<EOF" >> $GITHUB_ENV
          cat commit_report.html >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Debug: Mostrar resumen
          echo "=== Resumen de Ramas Detectadas ==="
          git log --since="$START_TIME" --until="$END_TIME" --pretty=format:"%H %d" --all | head -n 20

      - name: üìß Enviar reporte por correo
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: dihani.cy@gmail.com
          password: ${{ secrets.GMAIL_PASSWORD }}
          subject: "üì¢ Reporte Diario de Commits - ${{ env.REPORT_DATE }}"
          html_body: ${{ env.commit_report }}
          to: diana.carrasco@inetum.com, devdes673@gmail.com
          from: "GitHub Actions - Reporte Commits <dihani.cy@gmail.com>"
          priority: high