name: Enhanced Daily Commit Report

on:
  schedule:
    - cron: '59 4 * * *'  # 23:59:59 Per√∫ (04:59:59 UTC)
  workflow_dispatch:

jobs:
  check_commits:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Clonar y actualizar repositorio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Obtener todo el historial

      - name: üõ† Configurar entorno
        run: |
          # Configuraci√≥n de zona horaria para Per√∫
          sudo timedatectl set-timezone America/Lima
          export TZ='America/Lima'

          # Configuraci√≥n b√°sica de Git
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # Obtener todas las referencias remotas
          git fetch --all --prune --tags --force
          git pull --all --rebase

      - name: üìä Generar reporte mejorado
        id: generate-report
        run: |
          # Configuraci√≥n de fechas
          TODAY_PERU=$(date +"%Y-%m-%d")
          START_TIME="${TODAY_PERU} 00:00:00 -0500"
          END_TIME="${TODAY_PERU} 23:59:59 -0500"
          echo "REPORT_DATE=${TODAY_PERU}" >> $GITHUB_ENV

          # Funci√≥n mejorada para obtener archivos modificados
          get_modified_files() {
            local commit_hash=$1
            # Archivos modificados en el commit
            local files=$(git diff-tree --no-commit-id --name-only -r "$commit_hash")
            
            # Si es un merge commit, obtener archivos del merge
            if git show --no-patch --format="%P" "$commit_hash" | grep -q " "; then
              files+=$'\n'$(git diff --name-only "$commit_hash"^1 "$commit_hash"^2)
            fi
            
            # Eliminar duplicados y l√≠neas vac√≠as
            echo "$files" | grep -v "^$" | sort | uniq
          }

          # Funci√≥n para obtener rama principal
          get_primary_branch() {
            local commit_hash=$1
            local branch=$(git branch -r --contains "$commit_hash" | sed 's/^[ \t]*origin\///' | grep -v "HEAD" | head -n1)
            
            [ -z "$branch" ] && branch=$(git log -n 1 --pretty=format:"%D" "$commit_hash" | grep -o "origin/[^ ,]*" | sed 's/origin\///' | head -n1)
            echo "${branch:-main}" | sed -e 's/[~^][0-9]*//g' -e 's/HEAD -> //'
          }

          # Generar HTML
          REPORT="""<html>
          <head><style>
            /* Estilos mejorados */
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            h2 { color: #2c3e50; border-bottom: 2px solid #eee; padding-bottom: 10px; }
            h3 { color: #3498db; margin-top: 20px; }
            table { border-collapse: collapse; width: 100%; margin: 15px 0; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
            th { background-color: #3498db; color: white; text-align: left; padding: 10px; }
            td { padding: 10px; border-bottom: 1px solid #ddd; }
            .commit-row:hover { background-color: #f5f5f5; }
            .files-list { margin: 0; padding-left: 20px; list-style-type: square; }
            .no-changes { color: #7f8c8d; }
            .commit-hash { font-family: monospace; color: #2980b9; }
            .timestamp { font-size: 0.9em; color: #95a5a6; text-align: right; }
            .branch-main { background-color: #e8f5e9; }
            .branch-feature { background-color: #e3f2fd; }
            .merge-info { color: #6a1b9a; font-weight: bold; }
          </style></head>
          <body>
            <h2>üîç REPORTE DE COMMITS - $TODAY_PERU</h2>"""

          USERS=("DianaCY-ai" "Dihani")
          EMAILS=("diana.carrasco@inetum.com" "dihani.cy@gmail.com")

          for i in "${!USERS[@]}"; do
            USERNAME="${USERS[$i]}"
            EMAIL="${EMAILS[$i]}"
            COMMITS=$(git log --since="$START_TIME" --until="$END_TIME" --author="$USERNAME" \
                      --pretty=format:"%H|%s|%cd|%P" --date=format:'%Y-%m-%d %H:%M:%S' --all)

            if [ -n "$COMMITS" ]; then
              REPORT+="<h3>‚úÖ $USERNAME ($EMAIL)</h3><table>"
              REPORT+="<tr><th>Commit</th><th>Rama</th><th>Archivos</th></tr>"
              
              while IFS="|" read -r HASH MESSAGE DATE PARENTS; do
                BRANCH=$(get_primary_branch "$HASH")
                FILES=$(get_modified_files "$HASH")
                
                # Detectar si es merge commit
                MERGE_INFO=""
                if [ $(echo "$PARENTS" | wc -w) -gt 1 ]; then
                  MERGE_INFO="<div class='merge-info'>(Merge commit)</div>"
                fi
                
                REPORT+="<tr>"
                REPORT+="<td><strong>${MESSAGE}</strong><br>${DATE}${MERGE_INFO}</td>"
                REPORT+="<td>$BRANCH</td>"
                REPORT+="<td><ul class='files-list'>"
                
                if [ -n "$FILES" ]; then
                  while read -r FILE; do
                    REPORT+="<li>$FILE</li>"
                  done <<< "$FILES"
                else
                  REPORT+="<li>No se detectaron archivos modificados</li>"
                fi
                
                REPORT+="</ul></td></tr>"
              done <<< "$COMMITS"
              
              REPORT+="</table>"
            else
              REPORT+="<h3>‚ùå $USERNAME ($EMAIL) NO realiz√≥ commits hoy.</h3>"
            fi
          done

          REPORT+="</body></html>"
          echo "$REPORT" > commit_report.html
          echo "commit_report<<EOF" >> $GITHUB_ENV
          cat commit_report.html >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: üìß Enviar reporte
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: dihani.cy@gmail.com
          password: ${{ secrets.GMAIL_PASSWORD }}
          subject: "üì¢ Reporte de Commits - ${{ env.REPORT_DATE }}"
          html_body: ${{ env.commit_report }}
          to: diana.carrasco@inetum.com, devdes673@gmail.com
          from: "GitHub Actions <dihani.cy@gmail.com>"
          priority: high
